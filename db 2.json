{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"6974ddb0953597b845d10c3aec9016f9ed161fbb","modified":1543694384917},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1542397457681},{"_id":"themes/next/.all-contributorsrc","hash":"e32dc4075e304af04b98d0726d489081bea722c0","modified":1542397457681},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1542397457682},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1542397457682},{"_id":"themes/next/.eslintrc.json","hash":"cc5f297f0322672fe3f684f823bc4659e4a54c41","modified":1542397457682},{"_id":"themes/next/.travis.yml","hash":"3d1dc928c4a97933e64379cfde749dedf62f252c","modified":1542397457682},{"_id":"themes/next/LICENSE.md","hash":"fc7227c508af3351120181cbf2f9b99dc41f063e","modified":1542397457683},{"_id":"themes/next/bower.json","hash":"087eb7b81c0aa77a2b07c2ecf411ceb5ee00386d","modified":1542397457684},{"_id":"themes/next/gulpfile.coffee","hash":"48d2f9fa88a4210308fc41cc7d3f6d53989f71b7","modified":1542397457695},{"_id":"themes/next/README.md","hash":"ee7119baf976616a84d3c9c10fcab567995dc98e","modified":1542397457683},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1542397457686},{"_id":"themes/next/_config.yml","hash":"ed4282e2a257c835c5ee9febceb757aedcb37138","modified":1543694054440},{"_id":"themes/next/package.json","hash":"cf079447c126a9ad760f1457441f31803ef0470b","modified":1542397457719},{"_id":"source/_posts/DP-solution-for-TSP-Problems.md","hash":"f19fb36ea36a7cb2537eb3f2258850a3919edc73","modified":1543694054439},{"_id":"source/_posts/Expectation-Maximization.md","hash":"7bcfd80ed4ab49b4b8b3782e36d4d89b573dfdd2","modified":1543694054439},{"_id":"source/_posts/Bit-Level-Ternary-Counters.md","hash":"728140d404c5ee50d40c1bf78b0c9c98a87d5583","modified":1543694054439},{"_id":"source/_posts/Writing-Plans.md","hash":"f8c4da8de9748bbc64a8e19a071ab0cd96f1f1b8","modified":1543694054440},{"_id":"source/_posts/试谈一下Onepass算法.md","hash":"050b0e8510d58d383ce7fc19fba5c4a377a8cfcd","modified":1543698802734},{"_id":"source/_posts/LC84.png","hash":"d933431a06cd7d068981fde6b61f1b22c66b128d","modified":1543698744233},{"_id":"source/tags/index.md","hash":"dee8d1d7f804db96b127805273a0799bff56bfcb","modified":1543694054440},{"_id":"themes/next/docs/DATA-FILES.md","hash":"8e1962dd3e1b700169b3ae5bba43992f100651ce","modified":1542397457689},{"_id":"themes/next/docs/AUTHORS.md","hash":"7b24be2891167bdedb9284a682c2344ec63e50b5","modified":1542397457688},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"141e989844d0b5ae2e09fb162a280715afb39b0d","modified":1542397457688},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1542397457687},{"_id":"themes/next/docs/LICENSE","hash":"fe607fe22fc9308f6434b892a7f2d2c5514b8f0d","modified":1542397457690},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"ad57c168d12ba01cf144a1ea0627b2ffd1847d3e","modified":1542397457690},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"120750c03ec30ccaa470b113bbe39f3d423c67f0","modified":1542397457689},{"_id":"themes/next/docs/INSTALLATION.md","hash":"2bbdd6c1751b2b42ce9b9335da420c6026a483e9","modified":1542397457689},{"_id":"themes/next/docs/MATH.md","hash":"e6023505dcccaef0b856102543585a13fc6af0b1","modified":1542397457690},{"_id":"themes/next/scripts/merge-configs.js","hash":"33afe97284d34542015d358a720823feeebef120","modified":1542397457721},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1542397457757},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1542397457757},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1542397457757},{"_id":"themes/next/layout/_layout.swig","hash":"4b7a12e8acbfd782301eb30dbd4c85056a0a9ff7","modified":1542397457700},{"_id":"themes/next/layout/archive.swig","hash":"2b6450c6b6d2bcbcd123ad9f59922a5e323d77a5","modified":1542397457718},{"_id":"themes/next/layout/category.swig","hash":"5d955284a42f802a48560b4452c80906a5d1da02","modified":1542397457718},{"_id":"themes/next/layout/index.swig","hash":"c2a3896c64e96790edc10426ef586b6186a87f46","modified":1542397457718},{"_id":"themes/next/layout/page.swig","hash":"862b361852fb6d7a95bfb6077922410a33cd3126","modified":1542397457719},{"_id":"themes/next/layout/post.swig","hash":"318249db246a57e9422875a2457c6acfce974ba5","modified":1542397457719},{"_id":"themes/next/layout/schedule.swig","hash":"3268dd3d90d8b0e142cfa1a2ebb23355baeda148","modified":1542397457719},{"_id":"themes/next/layout/tag.swig","hash":"ba402ce8fd55e80b240e019e8d8c48949b194373","modified":1542397457719},{"_id":"themes/next/languages/de.yml","hash":"fb478c5040a4e58a4c1ad5fb52a91e5983d65a3a","modified":1542397457695},{"_id":"themes/next/languages/default.yml","hash":"c540c3a0d7db2d4239293c8783881962640b6c34","modified":1542397457695},{"_id":"themes/next/languages/en.yml","hash":"c540c3a0d7db2d4239293c8783881962640b6c34","modified":1542397457695},{"_id":"themes/next/languages/fr.yml","hash":"0162a85ae4175e66882a9ead1249fedb89200467","modified":1542397457696},{"_id":"themes/next/languages/id.yml","hash":"e7fb582e117a0785036dcdbb853a6551263d6aa6","modified":1542397457696},{"_id":"themes/next/languages/it.yml","hash":"62ef41d0a9a3816939cb4d93a524e6930ab9c517","modified":1542397457696},{"_id":"themes/next/languages/ja.yml","hash":"e331b15b1fda0f2285d25853f834682ab8dc3c39","modified":1542397457697},{"_id":"themes/next/languages/ko.yml","hash":"fae155018ae0efdf68669b2c7dd3f959c2e45cc9","modified":1542397457697},{"_id":"themes/next/languages/nl.yml","hash":"bb9ce8adfa5ee94bc6b5fac6ad24ba4605d180d3","modified":1542397457697},{"_id":"themes/next/languages/pt-BR.yml","hash":"bfc80c8a363fa2e8dde38ea2bc85cd19e15ab653","modified":1542397457698},{"_id":"themes/next/languages/pt.yml","hash":"3cb51937d13ff12fcce747f972ccb664840a9ef3","modified":1542397457698},{"_id":"themes/next/languages/vi.yml","hash":"8da921dd8335dd676efce31bf75fdd4af7ce6448","modified":1542397457698},{"_id":"themes/next/languages/tr.yml","hash":"c5f0c20743b1dd52ccb256050b1397d023e6bcd9","modified":1542397457698},{"_id":"themes/next/languages/ru.yml","hash":"db0644e738d2306ac38567aa183ca3e859a3980f","modified":1542397457698},{"_id":"themes/next/languages/zh-CN.yml","hash":"fbbf3a0b664ae8e927c700b0a813692b94345156","modified":1542397457698},{"_id":"themes/next/languages/zh-HK.yml","hash":"7903b96912c605e630fb695534012501b2fad805","modified":1542397457699},{"_id":"themes/next/languages/zh-TW.yml","hash":"6e6d2cd8f4244cb1b349b94904cb4770935acefd","modified":1542397457699},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1542397457721},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1542397457740},{"_id":"themes/next/scripts/helpers/engine.js","hash":"60eb1554456d9d0e5afc4a2d16f1580a0aa02da8","modified":1542397457720},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"15582e823d228c0b2288543c1eb460c40afad29b","modified":1542397457720},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"6c5d69e94961c793da156217ecf1179e868d7ba1","modified":1542397457691},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"6855402e2ef59aae307e8bd2a990647d3a605eb8","modified":1542397457692},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"d6d20f60f77a76c77f8e65d0c9adbd79d0274557","modified":1542397457691},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"b1dd18d9b890b21718883ea1832e7e02a773104a","modified":1542397457692},{"_id":"themes/next/docs/ru/README.md","hash":"c54e256ed11a84ee38f755d6f35a3e6e29a91dbc","modified":1542397457692},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"a45a791b49954331390d548ac34169d573ea5922","modified":1542397457692},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"f3eec572a7d83542e2710a7404082014aaa1a5e7","modified":1542397457693},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"b19a6e0ae96eb7c756fb5b1ba03934c7f9cbb3c3","modified":1542397457694},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"bd2c955d9b7b1b45bd74a4536717d547e03fcde3","modified":1542397457693},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"24cf2618d164440b047bb9396263de83bee5b993","modified":1542397457694},{"_id":"themes/next/scripts/tags/button.js","hash":"4b12c376bea894d23cca0f9fcb3d6518b6db279d","modified":1542397457722},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"f13430d9d1c9773b390787c2f046bb1f12a79878","modified":1542397457722},{"_id":"themes/next/scripts/tags/exturl.js","hash":"7ded3e7a78380b32de3e12f156e0978ef5c2890a","modified":1542397457722},{"_id":"themes/next/scripts/tags/full-image.js","hash":"e282bf5a7c70b3d354001e8f66d3bef1a4fbb79e","modified":1542397457722},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"981e01aaf45a1f0f23ce0796d03134f9e437aaca","modified":1542397457722},{"_id":"themes/next/scripts/tags/include-raw.js","hash":"5db59d56f4f4082382bf1c16722e6c383892b0c5","modified":1542397457722},{"_id":"themes/next/docs/zh-CN/README.md","hash":"aa6808f4f587c1a97205fa9427ba96a366bcb288","modified":1542397457694},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"8ac2f5d2a023211d8d8ea626cbf6b8dea67ac201","modified":1542397457694},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"5da70d7fa0c988a66a469b9795d33d471a4a4433","modified":1542397457695},{"_id":"themes/next/scripts/tags/label.js","hash":"f0ecd3b5773b19a6bd93a819dfe0c49ee418e4de","modified":1542397457723},{"_id":"themes/next/scripts/tags/note.js","hash":"adb945ba93ac487d46b969ca4e59d3681b8f8d1c","modified":1542397457723},{"_id":"themes/next/scripts/tags/tabs.js","hash":"e37761253d68a29593fe9ed2fe403f49b6e971de","modified":1542397457723},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1542397457700},{"_id":"themes/next/layout/_custom/head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1542397457699},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1542397457699},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"ac3ad2c0eccdf16edaa48816d111aaf51200a54b","modified":1542397457708},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"0a0129e926c27fffc6e7ef87fe370016bc7a4564","modified":1542397457708},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"6fc63d5da49cb6157b8792f39c7305b55a0d1593","modified":1542397457708},{"_id":"themes/next/layout/_partials/breadcrumb.swig","hash":"6994d891e064f10607bce23f6e2997db7994010e","modified":1542397457702},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"f380a10c792411eff82204305b097a288ed0b423","modified":1542397457709},{"_id":"themes/next/layout/_partials/footer.swig","hash":"07f88421bda86d9d5ff32d130b1cb1196b99a326","modified":1542397457703},{"_id":"themes/next/layout/_partials/comments.swig","hash":"e6ecc7e727b6cc35d9931bf65514ced329d6c535","modified":1542397457703},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1aaf32bed57b976c4c1913fd801be34d4838cc72","modified":1542397457706},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"dbe321bcf3cf45917cc11a3e3f50d8572bac2c70","modified":1542397457706},{"_id":"themes/next/layout/_partials/post-copyright.swig","hash":"2f73cc9ffb63534f0b6d8f0e9ee853c1af1b1244","modified":1542397457706},{"_id":"themes/next/layout/_third-party/copy-code.swig","hash":"a8ab2035654dd06d94faf11a35750529e922d719","modified":1542397457714},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"f532ce257fca6108e84b8f35329c53f272c2ce84","modified":1542397457714},{"_id":"themes/next/layout/_third-party/bookmark.swig","hash":"60001c8e08b21bf3a7afaf029839e1455340e95d","modified":1542397457713},{"_id":"themes/next/layout/_third-party/github-banner.swig","hash":"c0f6f02d7d7eb20eb216003c6cfb4ea52060f791","modified":1542397457715},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"927f19160ae14e7030df306fc7114ba777476282","modified":1542397457715},{"_id":"themes/next/layout/_third-party/pangu.swig","hash":"6b75c5fd76ae7cf0a7b04024510bd5221607eab3","modified":1542397457715},{"_id":"themes/next/layout/_third-party/pdf.swig","hash":"def2736c8c10170712ff36dea220243b0c1858af","modified":1542397457716},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1542397457716},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"b0ca46e0d1ff4c08cb0a3a8c1994f20d0260cef9","modified":1542397457716},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1542397457716},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"82f9e238bac68dfe592915631d1ff0cca7b9da95","modified":1542397457701},{"_id":"themes/next/layout/_macro/post-related.swig","hash":"08fe30ce8909b920540231e36c97e28cfbce62b6","modified":1542397457701},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"a9e1346b83cf99e06bed59a53fc069279751e52a","modified":1542397457702},{"_id":"themes/next/layout/_macro/post.swig","hash":"225db2f98a9f08b713d24994cf989880618438eb","modified":1542397457701},{"_id":"themes/next/layout/_macro/reward.swig","hash":"64d65d9ad0cc94734ac6ded279e2b5dc870a1cab","modified":1542397457702},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"e495523780dbdf6228d933c25bb28bcf4c0952f5","modified":1542397457702},{"_id":"themes/next/source/css/main.styl","hash":"c26ca6e7b5bd910b9046d6722c8e00be672890e0","modified":1542397457740},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1542397457740},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1542397457740},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1542397457740},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1542397457740},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1542397457741},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1542397457741},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1542397457741},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1542397457741},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1542397457741},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1542397457741},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1542397457742},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1542397457741},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1542397457742},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1542397457742},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1542397457742},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1542397457742},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1542397457742},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1542397457742},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1542397457709},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1542397457709},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1542397457734},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1542397457734},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1542397457735},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1542397457739},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1542397457739},{"_id":"themes/next/scripts/filters/after_post_render/exturl.js","hash":"9c9f61b7bfb3349b03b1e61355f20232044b5fd8","modified":1542397457720},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"cc865af4a3cb6d25a0be171b7fc919ade306bb50","modified":1542397457709},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"ea03fe9c98ddcfcc0ecfdbe5a2b622f9cde3b3a1","modified":1542397457709},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"ea03fe9c98ddcfcc0ecfdbe5a2b622f9cde3b3a1","modified":1542397457709},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"fd780171713aada5eb4f4ffed8e714617c8ae6be","modified":1542397457704},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1542397457703},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"a7e376b087ae77f2e2a61ba6af81cde5af693174","modified":1542397457704},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"00bf33b3c557b8f7e9faf49b226ea6ff7df5cda0","modified":1542397457704},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"3db735d0cd2d449edf2674310ac1e7c0043cb357","modified":1542397457705},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"2082f5077551123e695e8afec471c9c44b436acb","modified":1542397457705},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"a33b29ccbdc2248aedff23b04e0627f435824406","modified":1542397457706},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"88b4b6051592d26bff59788acb76346ce4e398c2","modified":1542397457705},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1542397457706},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1542397457707},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1542397457706},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1542397457707},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1542397457707},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1542397457707},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1542397457710},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1542397457710},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1542397457710},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1542397457711},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1542397457710},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"07307f1f0e0e9858f2c7143cbdfcb2a9a92149ab","modified":1542397457710},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"fae69a0e1a1d42f7bb44e594a29857d94594698b","modified":1542397457711},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"beb53371c035b62e1a2c7bb76c63afbb595fe6e5","modified":1542397457711},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"438c6f5e6665d72f4ea7ee206011d669246f6102","modified":1542397457712},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"5dbeb640707a9c91357e373b9063a48c8e78f439","modified":1542397457712},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"c28f3f4aa31d7f996d26a97df6cd7ffa9bfd2cec","modified":1542397457712},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1542397457712},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1542397457713},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1542397457713},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1542397457713},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"03ef008bc95e8e83232e5464a6c63d6157d33a5e","modified":1542397457713},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"fe8177e4698df764e470354b6acde8292a3515e0","modified":1542397457713},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"03e83f1311faafb7dddc2899042ed1cacd5c995e","modified":1542397457714},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"34421679cae6581697cd3ab7c3729eb220e3e3f5","modified":1542397457714},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"2c74a96dd314e804d801f8773ac1b2e0a970fce3","modified":1542397457714},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"a6fc00ec7f5642aabd66aa1cf51c6acc5b10e012","modified":1542397457715},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"97dbc2035bcb5aa7eafb80a4202dc827cce34983","modified":1542397457715},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"9b9ff4cc6d5474ab03f09835a2be80e0dba9fe89","modified":1542397457715},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1542397457718},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1542397457717},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1542397457718},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"b15e10abe85b4270860a56c970b559baa258b2a8","modified":1542397457717},{"_id":"themes/next/layout/_macro/menu/menu-badge.swig","hash":"65c5e585982dae7ae1542cada71858b4ea1f73d6","modified":1542397457700},{"_id":"themes/next/layout/_macro/menu/menu-item.swig","hash":"495fb08875b2e1e04f9c4f3e9e593cdf5c32cc31","modified":1542397457701},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"5e9c1d1b3559846f502568c905958b2b4f94bd6e","modified":1542397457734},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"086f5979b3de091c3378512e6c5c2f8fcb4f6298","modified":1542397457735},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"2640a54fa63bdd4c547eab7ce2fc1192cf0ccec8","modified":1542397457735},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1542397457734},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"e1f6f59ad6e562dfe640ee4ed5d1ac9b6aba4114","modified":1542397457739},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1542397457739},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"c167eeb6b736f7b021fba98c38c2c21032ee1255","modified":1542397457739},{"_id":"themes/next/source/css/_variables/base.styl","hash":"f9b83d0385529e52ce7ba95ed5ed6b3d4e2419bb","modified":1542397457739},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"1c41508b83cb0c4512e64b4d63afa1be954ce8ef","modified":1542397457743},{"_id":"themes/next/source/js/src/affix.js","hash":"a2aab233d99297435a5274bf512c3c753fe08e80","modified":1542397457743},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"1f7f10c579e7703d0f6acb8b73f3d78a07d0c623","modified":1542397457743},{"_id":"themes/next/source/js/src/exturl.js","hash":"54825acc8de4793feac415be227b965428f4e97d","modified":1542397457743},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1542397457743},{"_id":"themes/next/source/js/src/post-details.js","hash":"0dde5e6d4547587662a3256317a9d5d1db507692","modified":1542397457743},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"d07b3776708d4ae79ed2037c4c7391d5c9b06b19","modified":1542397457744},{"_id":"themes/next/source/js/src/motion.js","hash":"b45d2c0d48f2c8e6a0621b8063845f76b89476cc","modified":1542397457743},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1542397457745},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fa3c92968bcdbcb8d95a1729f7659d9753cbd077","modified":1542397457744},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1542397457744},{"_id":"themes/next/source/js/src/utils.js","hash":"28a79d317b7f4012917a54cac770551596bf6241","modified":1542397457744},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1542397457745},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1542397457746},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1542397457756},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1542397457755},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1542397457756},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1542397457744},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1542397457751},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"6958a97fde63e03983ec2394a4f8e408860fb42b","modified":1542397457717},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1542397457717},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"b4a2f1d031fe44452cf55ded8211cf018235073a","modified":1542397457723},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1542397457724},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1542397457724},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1542397457724},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1542397457724},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1542397457727},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1542397457731},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"665b1813a1d6fbc3c5549a76e4f26cd62a804dde","modified":1542397457735},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1542397457735},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1542397457736},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"0bef9f0dc134215bc4d0984ba3a16a1a0b6f87ec","modified":1542397457735},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"fe2dc74726a515549956d233becda188da64f948","modified":1542397457736},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"2212511ae14258d93bec57993c0385e5ffbb382b","modified":1542397457736},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1542397457736},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"5e12572b18846250e016a872a738026478ceef37","modified":1542397457736},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"aebbd86500d819c4532ab290c62b6f432bc2f878","modified":1542397457733},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"ec2a62400642bb69edd9259e74e8f1c8ed53c42b","modified":1542397457733},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1542397457733},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"efc40a32487e0ac7b94b1ca81bdbdcc4ec8f2924","modified":1542397457733},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1542397457734},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"02d138ed65060e98f20bc5b1dd59a791222b7156","modified":1542397457734},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1542397457734},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1542397457738},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"74c7dccf0a3ee9fc2ca25ad8e998243191813a0e","modified":1542397457738},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"876b5d99061025cf485a3cac440624ded5734319","modified":1542397457738},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1542397457738},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"f26860978fc4e011758945db5d0f79105ac84fae","modified":1542397457738},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"ffa870c3fa37a48b01dc6f967e66f5df508d02bf","modified":1542397457739},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"5779cc8086b1cfde9bc4f1afdd85223bdc45f0a0","modified":1542397457739},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1542397457737},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1542397457737},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"936132428a0d35b3947ccedd4c379940abcf223a","modified":1542397457737},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1542397457737},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"d5e8ea6336bc2e237d501ed0d5bbcbbfe296c832","modified":1542397457738},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"72037e8c4202a73b0c6ff7d81b57cd349e836837","modified":1542397457744},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1542397457746},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1542397457746},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1542397457747},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1542397457753},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1542397457752},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1542397457749},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1542397457750},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1542397457726},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"a6dc3c7eb81ef5117c28fa2245fff1adc02d0292","modified":1542397457726},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1542397457726},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"39dee82d481dd9d44e33658960ec63e47cd0a715","modified":1542397457724},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"a1eeceea4b88fba184408cb2507bbef1f5e7b0e0","modified":1542397457726},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1542397457726},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"7dd9a0378ccff3e4a2003f486b1a34e74c20dac6","modified":1542397457726},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"fb451dc4cc0355b57849c27d3eb110c73562f794","modified":1542397457726},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"7cc3f36222494c9a1325c5347d7eb9ae53755a32","modified":1542397457725},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"f2911a048e5c20ca2a059bd1087d98ac1c51681c","modified":1542397457727},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1542397457726},{"_id":"themes/next/source/css/_common/components/header/github-banner.styl","hash":"ee37e6c465b9b2a7e39175fccfcbed14f2db039b","modified":1542397457724},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1542397457725},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"05e68adae13f4d99a6ac6493daab39c92e39a6bd","modified":1542397457725},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1542397457725},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"e18b90c97aaff027e795f5a0cb10476a71bf1c3a","modified":1542397457729},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1542397457725},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"35c0350096921dd8e2222ec41b6c17a4ea6b44f2","modified":1542397457729},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"b34bb2ea4d16e47e6fdc06cd4feb32d93ccbd779","modified":1542397457730},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1542397457730},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1542397457730},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"4427ed3250483ed5b7baad74fa93474bd1eda729","modified":1542397457730},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1542397457730},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"43bc58daa8d35d5d515dc787ceb21dd77633fe49","modified":1542397457730},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1542397457730},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1542397457730},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1542397457727},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"3b5a37ba5e70f92c1ee707c8053524e38adbb710","modified":1542397457727},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"2356226157e8068b0e9bbe2f7d0f74e1ab49199b","modified":1542397457727},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1542397457727},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"ca89b167d368eac50a4f808fa53ba67e69cbef94","modified":1542397457727},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"417f05ff12a2aaca6ceeac8b7e7eb26e9440c4c3","modified":1542397457728},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1542397457728},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1542397457728},{"_id":"themes/next/source/css/_common/components/post/post-reading_progress.styl","hash":"f4e9f870baa56eae423a123062f00e24cc780be1","modified":1542397457728},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"549a8a0b5301d32acd86a97f17340cdfcd46fb63","modified":1542397457728},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"8e058c99dd7d41f0bd34c7c28b6ac9fbb17dcb5e","modified":1542397457729},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1542397457728},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1542397457728},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1542397457729},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"578bb2d5f24cad39205bbafb4c39c7e9962b9fa9","modified":1542397457729},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"3039df53b94b0847b0c451d2d227270b479cc184","modified":1542397457729},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"10e9bb3392826a5a8f4cabfc14c6d81645f33fe6","modified":1542397457732},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1542397457732},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1542397457732},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1542397457732},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1542397457733},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"76937db9702053d772f6758d9cea4088c2a6e2a3","modified":1542397457733},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1c18c91ab3c60169ebe654c80c968fd8458786a3","modified":1542397457733},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1542397457732},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"6ec8ea7b11a146777b6b8da0f71f0cc1dbd129df","modified":1542397457731},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1542397457731},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1542397457731},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1542397457731},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1542397457731},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1542397457731},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1542397457732},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"5e340ee2407a4e39cd708794cfcc718a5f398d7b","modified":1542397457732},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1542397457737},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1542397457736},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1542397457738},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1542397457748},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1542397457755},{"_id":"public/sitemap.xml","hash":"d363b0bcffd728c6db495ddf7c0f060da030b7ac","modified":1543698813360},{"_id":"public/tags/index.html","hash":"85dc966e64f1caccca44156a4fb419dba7ba99bf","modified":1543698813384},{"_id":"public/2018/11/15/Writing-Plans/index.html","hash":"ba3cdd020e853cd01b6e990e7f432aa38910251d","modified":1543698813384},{"_id":"public/archives/index.html","hash":"e5599763c6391b9a0bfd668fd4d7eeaf0bb475f0","modified":1543698813384},{"_id":"public/archives/2018/index.html","hash":"7f5fa987c2a7e3dccac38cba02a9cc886c44c2e9","modified":1543698813384},{"_id":"public/archives/2018/11/index.html","hash":"3d36ee5a74c252f7aac8bf1588e142f2b63afd11","modified":1543698813384},{"_id":"public/archives/2018/12/index.html","hash":"0522f377a348849fb2e47ea4c582af16dffbb074","modified":1543698813384},{"_id":"public/tags/ML/index.html","hash":"e27bcd9ea3642489022395370154dab369026ea8","modified":1543698813384},{"_id":"public/tags/NLP/index.html","hash":"ee8e723e3aa98df88dc43d4a0487c6ffe11d9d6f","modified":1543698813385},{"_id":"public/tags/Onepass-dynamic-programming/index.html","hash":"b343242195537ea8ee34cccc975924fced8a50b4","modified":1543698813385},{"_id":"public/2018/12/01/试谈一下Onepass算法/index.html","hash":"2f30429593a900119ae6ad25489cdfed6813a4fb","modified":1543698813385},{"_id":"public/2018/11/16/DP-solution-for-TSP-Problems/index.html","hash":"ee493862b1aff38406f5a861ef1c6b2ba1b7ac8a","modified":1543698813385},{"_id":"public/2018/11/16/Expectation-Maximization/index.html","hash":"c6d6698ca332b7bb170b3188e6cc5e2416a9ada3","modified":1543698813385},{"_id":"public/2018/11/15/Bit-Level-Ternary-Counters/index.html","hash":"e8207cd02bf6346c26ae3fddad30bae743feceb4","modified":1543698813385},{"_id":"public/index.html","hash":"7ad06865a32f1deef30d8c0f04b602b57dcb059d","modified":1543698813385},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1543698813388},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1543698813388},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1543698813388},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1543698813388},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1543698813388},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1543698813388},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1543698813388},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1543698813388},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1543698813388},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1543698813389},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1543698813389},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1543698813389},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1543698813389},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1543698813389},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1543698813389},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1543698813389},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1543698813389},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1543698813389},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1543698813389},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1543698813876},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1543698813877},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1543698813878},{"_id":"public/js/src/bootstrap.js","hash":"1c41508b83cb0c4512e64b4d63afa1be954ce8ef","modified":1543698813884},{"_id":"public/js/src/affix.js","hash":"a2aab233d99297435a5274bf512c3c753fe08e80","modified":1543698813885},{"_id":"public/js/src/algolia-search.js","hash":"1f7f10c579e7703d0f6acb8b73f3d78a07d0c623","modified":1543698813887},{"_id":"public/js/src/exturl.js","hash":"54825acc8de4793feac415be227b965428f4e97d","modified":1543698813888},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1543698813888},{"_id":"public/js/src/post-details.js","hash":"0dde5e6d4547587662a3256317a9d5d1db507692","modified":1543698813888},{"_id":"public/js/src/scroll-cookie.js","hash":"d07b3776708d4ae79ed2037c4c7391d5c9b06b19","modified":1543698813888},{"_id":"public/js/src/scrollspy.js","hash":"fa3c92968bcdbcb8d95a1729f7659d9753cbd077","modified":1543698813888},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1543698813888},{"_id":"public/js/src/schemes/pisces.js","hash":"72037e8c4202a73b0c6ff7d81b57cd349e836837","modified":1543698813888},{"_id":"public/css/main.css","hash":"71aa9aedcaada168076526aa385b01a91b7e3d1b","modified":1543698813888},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1543698813889},{"_id":"public/js/src/motion.js","hash":"b45d2c0d48f2c8e6a0621b8063845f76b89476cc","modified":1543698813895},{"_id":"public/js/src/utils.js","hash":"28a79d317b7f4012917a54cac770551596bf6241","modified":1543698813895},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1543698813895},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1543698813895},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1543698813895},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1543698813904},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1543698813910},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1543698813910},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1543698813910},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1543698813938},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1543698813940}],"Category":[],"Data":[],"Page":[{"title":"All tags","date":"2018-11-20T20:28:33.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: All tags\ndate: 2018-11-20 15:28:33\ntype: \"tags\"\n---","updated":"2018-12-01T19:54:14.440Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cjp5yeygq0001jtc6y4gurjv4","content":"\n","site":{"data":{}},"excerpt":"","more":"\n"}],"Post":[{"title":"DP solution for TSP Problems","date":"2018-11-17T02:00:16.000Z","mathjax":true,"_content":"\n> From [Wikipedia](https://en.wikipedia.org/wiki/Travelling_salesman_problem): The travelling salesman problem (TSP) asks the following question: \"Given a list of cities and the distances between each pair of cities, what is the shortest possible route that visits each city and returns to the origin city?\" It is an NP-hard problem in combinatorial optimization, important in operations research and theoretical computer science. \n\nLet's consider a variant of TSP problem such that we fix the first city and the last city of this travel and there are $n+2$ cities in total.\n\nThe naive brute force method to solve TSP problem has $O((n+1)!)$ time complexity. In this post, we introduce a DP algorithm that works in $O(n^2 2^n)$ time complexity and $O(n 2^n)$ space complexity. There are also other methods like branch and bound method that we would not cover in this post.\n<!--more-->\n\n# DP Space and Recurrence\nOne reason the naive algorithm is inefficient is that it has saved a lot of *unnecessary ordering information* of visited cities and there are actually overlapping between subproblems. Consider two incomplete paths `A B C` and `B A C`, they are actually equavalent because they have visited the same set of cities and have the same current city.\n\nOur DP space intend to capture all intermediate states where some cities are visited but others are not. To eliminate the redundant information or ordering, our DP state space only care the __current city__ and __set of visited cities__. The current city has $n$ choices, and every city except current one could be visited or not. Consequently, the total state space by rule of product is\n$$n 2^{n-1}$$\nTo make our later implementation easier, we ignore that the current city must be visited and use a larger DP space of size $n 2^n$. These extra space however does not affect our result.\n\nOur next step is to write the recurrence of DP. Clearly, we should go to our current state from a previous city. Let's say we are at city $c_m$ and we have visited cities $C=\\{c_1, c_2,\\ldots, c_{k-1}, c_k\\}$. This state is denoted by the tuple $(c_m, C)$. To arrive at current city, we could go from any previous state\n$$(c_n, C\\setminus\\{c_m\\}),\\quad c_n\\in C\\setminus\\{c_m\\}$$\nwith an extra cost $d(c_m, c_n)$.\n\n\n# Implementation\n## Representation of Set of Cities\nWe use a 32-bit integer to represent the set of cities (less than 32). Existence of the $i$-th city corresponds to $i$-th bit of the integer. \n\n## Data Dependency and DP updates\nIt is obvious that one state only has dependency on other state with a smaller set of cities, which corresponds to a smaller integer in our representation. So we enumerate all set of travelled cities by ascending order of their integer i.e. $0, 1, 2, \\ldots, 2^n-1$.\n\n## Code\n```py\ninf = float('inf')\ndef highbit_range(n):\n    for h in range(n):\n        for i in range(1<<h, 1<<(h+1)):\n            yield h, i\n\ndef last_two_bits(h, cur):\n    l = [k for k in range(h) if (1<<k)&cur]\n    if not l: return []\n    l.append(h)\n    return ((i, j) for i in l for j in l if i!=j)\n\ndef simple_tsp(d_s, d_e, dist):\n    \"\"\"\n    Args\n    ====\n    d_s: distance from start to intermediate nodes\n    d_e: distance from intermediate nodes to end\n    dist: The adjacent matrix storing shortest path between each pair of intermediate nodes\n    \n    Example:\n    ====\n    >>> simple_tsp([1,2,3], [4,5,6], [[0,2,4], [2,0,5], [4,5,0]])\n    14\n    \"\"\"\n    n = len(dist)\n    dp = [[inf]*(2**n) for i in range(n)]\n    for i in range(n):\n        dp[i][1<<i] = d_s[i]\n    for h, cur in highbit_range(n):\n        for last, last2 in last_two_bits(h, cur):\n            prev = cur^(1<<last)\n            dp[last][cur] = min(dp[last2][prev]+dist[last2][last], dp[last][cur])\n    complete = (1<<n)-1\n    return min(dp[last][complete]+d_e[last] for last in range(n))\n```\n\n## Examples\n+ lc847. Shortest Path Visiting All Nodes\n+ lc943. Find the Shortest Superstring\n","source":"_posts/DP-solution-for-TSP-Problems.md","raw":"---\ntitle: DP solution for TSP Problems\ndate: 2018-11-16 21:00:16\ntags:\nmathjax: true\n---\n\n> From [Wikipedia](https://en.wikipedia.org/wiki/Travelling_salesman_problem): The travelling salesman problem (TSP) asks the following question: \"Given a list of cities and the distances between each pair of cities, what is the shortest possible route that visits each city and returns to the origin city?\" It is an NP-hard problem in combinatorial optimization, important in operations research and theoretical computer science. \n\nLet's consider a variant of TSP problem such that we fix the first city and the last city of this travel and there are $n+2$ cities in total.\n\nThe naive brute force method to solve TSP problem has $O((n+1)!)$ time complexity. In this post, we introduce a DP algorithm that works in $O(n^2 2^n)$ time complexity and $O(n 2^n)$ space complexity. There are also other methods like branch and bound method that we would not cover in this post.\n<!--more-->\n\n# DP Space and Recurrence\nOne reason the naive algorithm is inefficient is that it has saved a lot of *unnecessary ordering information* of visited cities and there are actually overlapping between subproblems. Consider two incomplete paths `A B C` and `B A C`, they are actually equavalent because they have visited the same set of cities and have the same current city.\n\nOur DP space intend to capture all intermediate states where some cities are visited but others are not. To eliminate the redundant information or ordering, our DP state space only care the __current city__ and __set of visited cities__. The current city has $n$ choices, and every city except current one could be visited or not. Consequently, the total state space by rule of product is\n$$n 2^{n-1}$$\nTo make our later implementation easier, we ignore that the current city must be visited and use a larger DP space of size $n 2^n$. These extra space however does not affect our result.\n\nOur next step is to write the recurrence of DP. Clearly, we should go to our current state from a previous city. Let's say we are at city $c_m$ and we have visited cities $C=\\{c_1, c_2,\\ldots, c_{k-1}, c_k\\}$. This state is denoted by the tuple $(c_m, C)$. To arrive at current city, we could go from any previous state\n$$(c_n, C\\setminus\\{c_m\\}),\\quad c_n\\in C\\setminus\\{c_m\\}$$\nwith an extra cost $d(c_m, c_n)$.\n\n\n# Implementation\n## Representation of Set of Cities\nWe use a 32-bit integer to represent the set of cities (less than 32). Existence of the $i$-th city corresponds to $i$-th bit of the integer. \n\n## Data Dependency and DP updates\nIt is obvious that one state only has dependency on other state with a smaller set of cities, which corresponds to a smaller integer in our representation. So we enumerate all set of travelled cities by ascending order of their integer i.e. $0, 1, 2, \\ldots, 2^n-1$.\n\n## Code\n```py\ninf = float('inf')\ndef highbit_range(n):\n    for h in range(n):\n        for i in range(1<<h, 1<<(h+1)):\n            yield h, i\n\ndef last_two_bits(h, cur):\n    l = [k for k in range(h) if (1<<k)&cur]\n    if not l: return []\n    l.append(h)\n    return ((i, j) for i in l for j in l if i!=j)\n\ndef simple_tsp(d_s, d_e, dist):\n    \"\"\"\n    Args\n    ====\n    d_s: distance from start to intermediate nodes\n    d_e: distance from intermediate nodes to end\n    dist: The adjacent matrix storing shortest path between each pair of intermediate nodes\n    \n    Example:\n    ====\n    >>> simple_tsp([1,2,3], [4,5,6], [[0,2,4], [2,0,5], [4,5,0]])\n    14\n    \"\"\"\n    n = len(dist)\n    dp = [[inf]*(2**n) for i in range(n)]\n    for i in range(n):\n        dp[i][1<<i] = d_s[i]\n    for h, cur in highbit_range(n):\n        for last, last2 in last_two_bits(h, cur):\n            prev = cur^(1<<last)\n            dp[last][cur] = min(dp[last2][prev]+dist[last2][last], dp[last][cur])\n    complete = (1<<n)-1\n    return min(dp[last][complete]+d_e[last] for last in range(n))\n```\n\n## Examples\n+ lc847. Shortest Path Visiting All Nodes\n+ lc943. Find the Shortest Superstring\n","slug":"DP-solution-for-TSP-Problems","published":1,"updated":"2018-12-01T19:54:14.439Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp5yeygk0000jtc65ua4muv3","content":"<blockquote>\n<p>From <a href=\"https://en.wikipedia.org/wiki/Travelling_salesman_problem\" target=\"_blank\" rel=\"noopener\">Wikipedia</a>: The travelling salesman problem (TSP) asks the following question: &quot;Given a list of cities and the distances between each pair of cities, what is the shortest possible route that visits each city and returns to the origin city?&quot; It is an NP-hard problem in combinatorial optimization, important in operations research and theoretical computer science.</p>\n</blockquote>\n<p>Let's consider a variant of TSP problem such that we fix the first city and the last city of this travel and there are <span class=\"math inline\">\\(n+2\\)</span> cities in total.</p>\n<p>The naive brute force method to solve TSP problem has <span class=\"math inline\">\\(O((n+1)!)\\)</span> time complexity. In this post, we introduce a DP algorithm that works in <span class=\"math inline\">\\(O(n^2 2^n)\\)</span> time complexity and <span class=\"math inline\">\\(O(n 2^n)\\)</span> space complexity. There are also other methods like branch and bound method that we would not cover in this post. <a id=\"more\"></a></p>\n<h1 id=\"dp-space-and-recurrence\">DP Space and Recurrence</h1>\n<p>One reason the naive algorithm is inefficient is that it has saved a lot of <em>unnecessary ordering information</em> of visited cities and there are actually overlapping between subproblems. Consider two incomplete paths <code>A B C</code> and <code>B A C</code>, they are actually equavalent because they have visited the same set of cities and have the same current city.</p>\n<p>Our DP space intend to capture all intermediate states where some cities are visited but others are not. To eliminate the redundant information or ordering, our DP state space only care the <strong>current city</strong> and <strong>set of visited cities</strong>. The current city has <span class=\"math inline\">\\(n\\)</span> choices, and every city except current one could be visited or not. Consequently, the total state space by rule of product is <span class=\"math display\">\\[n 2^{n-1}\\]</span> To make our later implementation easier, we ignore that the current city must be visited and use a larger DP space of size <span class=\"math inline\">\\(n 2^n\\)</span>. These extra space however does not affect our result.</p>\n<p>Our next step is to write the recurrence of DP. Clearly, we should go to our current state from a previous city. Let's say we are at city <span class=\"math inline\">\\(c_m\\)</span> and we have visited cities <span class=\"math inline\">\\(C=\\{c_1, c_2,\\ldots, c_{k-1}, c_k\\}\\)</span>. This state is denoted by the tuple <span class=\"math inline\">\\((c_m, C)\\)</span>. To arrive at current city, we could go from any previous state <span class=\"math display\">\\[(c_n, C\\setminus\\{c_m\\}),\\quad c_n\\in C\\setminus\\{c_m\\}\\]</span> with an extra cost <span class=\"math inline\">\\(d(c_m, c_n)\\)</span>.</p>\n<h1 id=\"implementation\">Implementation</h1>\n<h2 id=\"representation-of-set-of-cities\">Representation of Set of Cities</h2>\n<p>We use a 32-bit integer to represent the set of cities (less than 32). Existence of the <span class=\"math inline\">\\(i\\)</span>-th city corresponds to <span class=\"math inline\">\\(i\\)</span>-th bit of the integer.</p>\n<h2 id=\"data-dependency-and-dp-updates\">Data Dependency and DP updates</h2>\n<p>It is obvious that one state only has dependency on other state with a smaller set of cities, which corresponds to a smaller integer in our representation. So we enumerate all set of travelled cities by ascending order of their integer i.e. <span class=\"math inline\">\\(0, 1, 2, \\ldots, 2^n-1\\)</span>.</p>\n<h2 id=\"code\">Code</h2>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">inf = float(<span class=\"string\">'inf'</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">highbit_range</span><span class=\"params\">(n)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> h <span class=\"keyword\">in</span> range(n):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>&lt;&lt;h, <span class=\"number\">1</span>&lt;&lt;(h+<span class=\"number\">1</span>)):</span><br><span class=\"line\">            <span class=\"keyword\">yield</span> h, i</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">last_two_bits</span><span class=\"params\">(h, cur)</span>:</span></span><br><span class=\"line\">    l = [k <span class=\"keyword\">for</span> k <span class=\"keyword\">in</span> range(h) <span class=\"keyword\">if</span> (<span class=\"number\">1</span>&lt;&lt;k)&amp;cur]</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> l: <span class=\"keyword\">return</span> []</span><br><span class=\"line\">    l.append(h)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ((i, j) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> l <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> l <span class=\"keyword\">if</span> i!=j)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">simple_tsp</span><span class=\"params\">(d_s, d_e, dist)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">    Args</span></span><br><span class=\"line\"><span class=\"string\">    ====</span></span><br><span class=\"line\"><span class=\"string\">    d_s: distance from start to intermediate nodes</span></span><br><span class=\"line\"><span class=\"string\">    d_e: distance from intermediate nodes to end</span></span><br><span class=\"line\"><span class=\"string\">    dist: The adjacent matrix storing shortest path between each pair of intermediate nodes</span></span><br><span class=\"line\"><span class=\"string\">    </span></span><br><span class=\"line\"><span class=\"string\">    Example:</span></span><br><span class=\"line\"><span class=\"string\">    ====</span></span><br><span class=\"line\"><span class=\"string\">    &gt;&gt;&gt; simple_tsp([1,2,3], [4,5,6], [[0,2,4], [2,0,5], [4,5,0]])</span></span><br><span class=\"line\"><span class=\"string\">    14</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\">    n = len(dist)</span><br><span class=\"line\">    dp = [[inf]*(<span class=\"number\">2</span>**n) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(n)]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(n):</span><br><span class=\"line\">        dp[i][<span class=\"number\">1</span>&lt;&lt;i] = d_s[i]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> h, cur <span class=\"keyword\">in</span> highbit_range(n):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> last, last2 <span class=\"keyword\">in</span> last_two_bits(h, cur):</span><br><span class=\"line\">            prev = cur^(<span class=\"number\">1</span>&lt;&lt;last)</span><br><span class=\"line\">            dp[last][cur] = min(dp[last2][prev]+dist[last2][last], dp[last][cur])</span><br><span class=\"line\">    complete = (<span class=\"number\">1</span>&lt;&lt;n)<span class=\"number\">-1</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> min(dp[last][complete]+d_e[last] <span class=\"keyword\">for</span> last <span class=\"keyword\">in</span> range(n))</span><br></pre></td></tr></table></figure>\n<h2 id=\"examples\">Examples</h2>\n<ul>\n<li>lc847. Shortest Path Visiting All Nodes</li>\n<li>lc943. Find the Shortest Superstring</li>\n</ul>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>From <a href=\"https://en.wikipedia.org/wiki/Travelling_salesman_problem\" target=\"_blank\" rel=\"noopener\">Wikipedia</a>: The travelling salesman problem (TSP) asks the following question: &quot;Given a list of cities and the distances between each pair of cities, what is the shortest possible route that visits each city and returns to the origin city?&quot; It is an NP-hard problem in combinatorial optimization, important in operations research and theoretical computer science.</p>\n</blockquote>\n<p>Let's consider a variant of TSP problem such that we fix the first city and the last city of this travel and there are <span class=\"math inline\">\\(n+2\\)</span> cities in total.</p>\n<p>The naive brute force method to solve TSP problem has <span class=\"math inline\">\\(O((n+1)!)\\)</span> time complexity. In this post, we introduce a DP algorithm that works in <span class=\"math inline\">\\(O(n^2 2^n)\\)</span> time complexity and <span class=\"math inline\">\\(O(n 2^n)\\)</span> space complexity. There are also other methods like branch and bound method that we would not cover in this post.","more":"</p>\n<h1 id=\"dp-space-and-recurrence\">DP Space and Recurrence</h1>\n<p>One reason the naive algorithm is inefficient is that it has saved a lot of <em>unnecessary ordering information</em> of visited cities and there are actually overlapping between subproblems. Consider two incomplete paths <code>A B C</code> and <code>B A C</code>, they are actually equavalent because they have visited the same set of cities and have the same current city.</p>\n<p>Our DP space intend to capture all intermediate states where some cities are visited but others are not. To eliminate the redundant information or ordering, our DP state space only care the <strong>current city</strong> and <strong>set of visited cities</strong>. The current city has <span class=\"math inline\">\\(n\\)</span> choices, and every city except current one could be visited or not. Consequently, the total state space by rule of product is <span class=\"math display\">\\[n 2^{n-1}\\]</span> To make our later implementation easier, we ignore that the current city must be visited and use a larger DP space of size <span class=\"math inline\">\\(n 2^n\\)</span>. These extra space however does not affect our result.</p>\n<p>Our next step is to write the recurrence of DP. Clearly, we should go to our current state from a previous city. Let's say we are at city <span class=\"math inline\">\\(c_m\\)</span> and we have visited cities <span class=\"math inline\">\\(C=\\{c_1, c_2,\\ldots, c_{k-1}, c_k\\}\\)</span>. This state is denoted by the tuple <span class=\"math inline\">\\((c_m, C)\\)</span>. To arrive at current city, we could go from any previous state <span class=\"math display\">\\[(c_n, C\\setminus\\{c_m\\}),\\quad c_n\\in C\\setminus\\{c_m\\}\\]</span> with an extra cost <span class=\"math inline\">\\(d(c_m, c_n)\\)</span>.</p>\n<h1 id=\"implementation\">Implementation</h1>\n<h2 id=\"representation-of-set-of-cities\">Representation of Set of Cities</h2>\n<p>We use a 32-bit integer to represent the set of cities (less than 32). Existence of the <span class=\"math inline\">\\(i\\)</span>-th city corresponds to <span class=\"math inline\">\\(i\\)</span>-th bit of the integer.</p>\n<h2 id=\"data-dependency-and-dp-updates\">Data Dependency and DP updates</h2>\n<p>It is obvious that one state only has dependency on other state with a smaller set of cities, which corresponds to a smaller integer in our representation. So we enumerate all set of travelled cities by ascending order of their integer i.e. <span class=\"math inline\">\\(0, 1, 2, \\ldots, 2^n-1\\)</span>.</p>\n<h2 id=\"code\">Code</h2>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">inf = float(<span class=\"string\">'inf'</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">highbit_range</span><span class=\"params\">(n)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> h <span class=\"keyword\">in</span> range(n):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>&lt;&lt;h, <span class=\"number\">1</span>&lt;&lt;(h+<span class=\"number\">1</span>)):</span><br><span class=\"line\">            <span class=\"keyword\">yield</span> h, i</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">last_two_bits</span><span class=\"params\">(h, cur)</span>:</span></span><br><span class=\"line\">    l = [k <span class=\"keyword\">for</span> k <span class=\"keyword\">in</span> range(h) <span class=\"keyword\">if</span> (<span class=\"number\">1</span>&lt;&lt;k)&amp;cur]</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> l: <span class=\"keyword\">return</span> []</span><br><span class=\"line\">    l.append(h)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ((i, j) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> l <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> l <span class=\"keyword\">if</span> i!=j)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">simple_tsp</span><span class=\"params\">(d_s, d_e, dist)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">    Args</span></span><br><span class=\"line\"><span class=\"string\">    ====</span></span><br><span class=\"line\"><span class=\"string\">    d_s: distance from start to intermediate nodes</span></span><br><span class=\"line\"><span class=\"string\">    d_e: distance from intermediate nodes to end</span></span><br><span class=\"line\"><span class=\"string\">    dist: The adjacent matrix storing shortest path between each pair of intermediate nodes</span></span><br><span class=\"line\"><span class=\"string\">    </span></span><br><span class=\"line\"><span class=\"string\">    Example:</span></span><br><span class=\"line\"><span class=\"string\">    ====</span></span><br><span class=\"line\"><span class=\"string\">    &gt;&gt;&gt; simple_tsp([1,2,3], [4,5,6], [[0,2,4], [2,0,5], [4,5,0]])</span></span><br><span class=\"line\"><span class=\"string\">    14</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\">    n = len(dist)</span><br><span class=\"line\">    dp = [[inf]*(<span class=\"number\">2</span>**n) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(n)]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(n):</span><br><span class=\"line\">        dp[i][<span class=\"number\">1</span>&lt;&lt;i] = d_s[i]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> h, cur <span class=\"keyword\">in</span> highbit_range(n):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> last, last2 <span class=\"keyword\">in</span> last_two_bits(h, cur):</span><br><span class=\"line\">            prev = cur^(<span class=\"number\">1</span>&lt;&lt;last)</span><br><span class=\"line\">            dp[last][cur] = min(dp[last2][prev]+dist[last2][last], dp[last][cur])</span><br><span class=\"line\">    complete = (<span class=\"number\">1</span>&lt;&lt;n)<span class=\"number\">-1</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> min(dp[last][complete]+d_e[last] <span class=\"keyword\">for</span> last <span class=\"keyword\">in</span> range(n))</span><br></pre></td></tr></table></figure>\n<h2 id=\"examples\">Examples</h2>\n<ul>\n<li>lc847. Shortest Path Visiting All Nodes</li>\n<li>lc943. Find the Shortest Superstring</li>\n</ul>"},{"title":"EM算法与Word Alignment","date":"2018-11-16T05:15:49.000Z","mathjax":true,"_content":"\n# EM算法\n\n## 概述\n\n已有一个对随机变量的观测（Observation）$X$，我们想求出模型参数$\\theta$。我们假设X的分布不仅受$\\theta$影响，而且还受一个隐变量$Z$影响（$Z$也由$\\theta$决定）。\n\n所以似然函数（likelihood）可以写为\n\\begin{align*}\nL(\\theta) &= \\log P(X\\mid \\theta) = \\log \\sum_Z P(X,Z\\mid \\theta) \\\\\n          &= \\log (\\sum_Z P(X\\mid Z,\\theta)P(Z\\mid \\theta))\n\\end{align*}\n\n## 算法输入\n\n+ 观测量 $X$\n+ 隐变量 $Z$\n+ 联合分布 $p(X,Z\\mid \\theta)$\n+ 条件分布 $p(Z\\mid X, \\theta)$\n\n## 算法输出\n\n参数$\\theta = \\arg\\max_\\theta L(\\theta)$\n<!--more-->\n\n## Procedure\n\nNote: $\\theta_i$ is the value of i-th iteration's parameter $\\theta$.\n\n1. Select an initial $\\theta_0$\n2. (i+1)-th **E** step: compute $$ \\begin{align} Q(\\theta,\\theta_i) &= E_Z[\\ln p(X,Z\\mid \\theta)|X,\\theta_i] \\\\ &= \\sum_Z \\ln p(X,Z\\mid \\theta) p(Z\\mid X,\\theta_i) \\end{align}$$\n3. (i+1)-th **M** step: compute $\\theta_{i+1} = \\underset{\\theta}{\\text{argmax}} Q(\\theta, \\theta_i)$\n4. repeat 2 and 3 until convergence\n\n# Intuition behind EM\n\n$$\n\\begin{align}\n\\ln p(X\\mid \\theta) &= \\sum_Z q(Z) \\cdot \\ln \\dfrac{p(X,Z\\mid \\theta)}{p(Z\\mid X,\\theta)} \\\\\n&= \\sum_Z q(Z) \\cdot \\ln p(X,Z\\mid \\theta) - \\sum_Z q(Z) \\cdot \\ln p(Z\\mid X,\\theta) \\\\\n&= \\sum_Z q(Z) \\cdot \\ln \\dfrac{p(X,Z\\mid \\theta)}{q(Z)} - \\sum_Z q(Z) \\cdot \\ln \\dfrac{p(Z\\mid X,\\theta)}{q(Z)} \\\\\n&= \\mathcal{L}(q,\\theta) + KL(q \\| p)\n\\end{align}\n$$\n\n$KL(q\\|p)\\ge 0$ always holds. We fix KL-divergence and maximize $\\mathcal{L}$.\n\nLet $KL(q\\|p) = 0$ so we have $q(Z)=p(Z\\mid X,\\theta)$.\n\nIf we subsitute $q(Z)=p(Z\\mid X,\\theta)$ into $\\mathcal{L}$, $\\mathcal{L}(q,\\theta) = Q(\\theta, \\theta^{old}) + constant$.\n","source":"_posts/Expectation-Maximization.md","raw":"---\ntitle: EM算法与Word Alignment\ndate: 2018-11-16 00:15:49\ntags: \n    - ML\n    - NLP\nmathjax: true\n---\n\n# EM算法\n\n## 概述\n\n已有一个对随机变量的观测（Observation）$X$，我们想求出模型参数$\\theta$。我们假设X的分布不仅受$\\theta$影响，而且还受一个隐变量$Z$影响（$Z$也由$\\theta$决定）。\n\n所以似然函数（likelihood）可以写为\n\\begin{align*}\nL(\\theta) &= \\log P(X\\mid \\theta) = \\log \\sum_Z P(X,Z\\mid \\theta) \\\\\n          &= \\log (\\sum_Z P(X\\mid Z,\\theta)P(Z\\mid \\theta))\n\\end{align*}\n\n## 算法输入\n\n+ 观测量 $X$\n+ 隐变量 $Z$\n+ 联合分布 $p(X,Z\\mid \\theta)$\n+ 条件分布 $p(Z\\mid X, \\theta)$\n\n## 算法输出\n\n参数$\\theta = \\arg\\max_\\theta L(\\theta)$\n<!--more-->\n\n## Procedure\n\nNote: $\\theta_i$ is the value of i-th iteration's parameter $\\theta$.\n\n1. Select an initial $\\theta_0$\n2. (i+1)-th **E** step: compute $$ \\begin{align} Q(\\theta,\\theta_i) &= E_Z[\\ln p(X,Z\\mid \\theta)|X,\\theta_i] \\\\ &= \\sum_Z \\ln p(X,Z\\mid \\theta) p(Z\\mid X,\\theta_i) \\end{align}$$\n3. (i+1)-th **M** step: compute $\\theta_{i+1} = \\underset{\\theta}{\\text{argmax}} Q(\\theta, \\theta_i)$\n4. repeat 2 and 3 until convergence\n\n# Intuition behind EM\n\n$$\n\\begin{align}\n\\ln p(X\\mid \\theta) &= \\sum_Z q(Z) \\cdot \\ln \\dfrac{p(X,Z\\mid \\theta)}{p(Z\\mid X,\\theta)} \\\\\n&= \\sum_Z q(Z) \\cdot \\ln p(X,Z\\mid \\theta) - \\sum_Z q(Z) \\cdot \\ln p(Z\\mid X,\\theta) \\\\\n&= \\sum_Z q(Z) \\cdot \\ln \\dfrac{p(X,Z\\mid \\theta)}{q(Z)} - \\sum_Z q(Z) \\cdot \\ln \\dfrac{p(Z\\mid X,\\theta)}{q(Z)} \\\\\n&= \\mathcal{L}(q,\\theta) + KL(q \\| p)\n\\end{align}\n$$\n\n$KL(q\\|p)\\ge 0$ always holds. We fix KL-divergence and maximize $\\mathcal{L}$.\n\nLet $KL(q\\|p) = 0$ so we have $q(Z)=p(Z\\mid X,\\theta)$.\n\nIf we subsitute $q(Z)=p(Z\\mid X,\\theta)$ into $\\mathcal{L}$, $\\mathcal{L}(q,\\theta) = Q(\\theta, \\theta^{old}) + constant$.\n","slug":"Expectation-Maximization","published":1,"updated":"2018-12-01T19:54:14.439Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp5yeygr0002jtc6fwowwa6q","content":"<h1 id=\"em算法\">EM算法</h1>\n<h2 id=\"概述\">概述</h2>\n<p>已有一个对随机变量的观测（Observation）<span class=\"math inline\">\\(X\\)</span>，我们想求出模型参数<span class=\"math inline\">\\(\\theta\\)</span>。我们假设X的分布不仅受<span class=\"math inline\">\\(\\theta\\)</span>影响，而且还受一个隐变量<span class=\"math inline\">\\(Z\\)</span>影响（<span class=\"math inline\">\\(Z\\)</span>也由<span class=\"math inline\">\\(\\theta\\)</span>决定）。</p>\n<p>所以似然函数（likelihood）可以写为 <span class=\"math display\">\\[\\begin{align*}\nL(\\theta) &amp;= \\log P(X\\mid \\theta) = \\log \\sum_Z P(X,Z\\mid \\theta) \\\\\n          &amp;= \\log (\\sum_Z P(X\\mid Z,\\theta)P(Z\\mid \\theta))\n\\end{align*}\\]</span></p>\n<h2 id=\"算法输入\">算法输入</h2>\n<ul>\n<li>观测量 <span class=\"math inline\">\\(X\\)</span></li>\n<li>隐变量 <span class=\"math inline\">\\(Z\\)</span></li>\n<li>联合分布 <span class=\"math inline\">\\(p(X,Z\\mid \\theta)\\)</span></li>\n<li>条件分布 <span class=\"math inline\">\\(p(Z\\mid X, \\theta)\\)</span></li>\n</ul>\n<h2 id=\"算法输出\">算法输出</h2>\n<p>参数<span class=\"math inline\">\\(\\theta = \\arg\\max_\\theta L(\\theta)\\)</span> <a id=\"more\"></a></p>\n<h2 id=\"procedure\">Procedure</h2>\n<p>Note: <span class=\"math inline\">\\(\\theta_i\\)</span> is the value of i-th iteration's parameter <span class=\"math inline\">\\(\\theta\\)</span>.</p>\n<ol type=\"1\">\n<li>Select an initial <span class=\"math inline\">\\(\\theta_0\\)</span></li>\n<li>(i+1)-th <strong>E</strong> step: compute <span class=\"math display\">\\[ \\begin{align} Q(\\theta,\\theta_i) &amp;= E_Z[\\ln p(X,Z\\mid \\theta)|X,\\theta_i] \\\\ &amp;= \\sum_Z \\ln p(X,Z\\mid \\theta) p(Z\\mid X,\\theta_i) \\end{align}\\]</span></li>\n<li>(i+1)-th <strong>M</strong> step: compute <span class=\"math inline\">\\(\\theta_{i+1} = \\underset{\\theta}{\\text{argmax}} Q(\\theta, \\theta_i)\\)</span></li>\n<li>repeat 2 and 3 until convergence</li>\n</ol>\n<h1 id=\"intuition-behind-em\">Intuition behind EM</h1>\n<p><span class=\"math display\">\\[\n\\begin{align}\n\\ln p(X\\mid \\theta) &amp;= \\sum_Z q(Z) \\cdot \\ln \\dfrac{p(X,Z\\mid \\theta)}{p(Z\\mid X,\\theta)} \\\\\n&amp;= \\sum_Z q(Z) \\cdot \\ln p(X,Z\\mid \\theta) - \\sum_Z q(Z) \\cdot \\ln p(Z\\mid X,\\theta) \\\\\n&amp;= \\sum_Z q(Z) \\cdot \\ln \\dfrac{p(X,Z\\mid \\theta)}{q(Z)} - \\sum_Z q(Z) \\cdot \\ln \\dfrac{p(Z\\mid X,\\theta)}{q(Z)} \\\\\n&amp;= \\mathcal{L}(q,\\theta) + KL(q \\| p)\n\\end{align}\n\\]</span></p>\n<p><span class=\"math inline\">\\(KL(q\\|p)\\ge 0\\)</span> always holds. We fix KL-divergence and maximize <span class=\"math inline\">\\(\\mathcal{L}\\)</span>.</p>\n<p>Let <span class=\"math inline\">\\(KL(q\\|p) = 0\\)</span> so we have <span class=\"math inline\">\\(q(Z)=p(Z\\mid X,\\theta)\\)</span>.</p>\n<p>If we subsitute <span class=\"math inline\">\\(q(Z)=p(Z\\mid X,\\theta)\\)</span> into <span class=\"math inline\">\\(\\mathcal{L}\\)</span>, <span class=\"math inline\">\\(\\mathcal{L}(q,\\theta) = Q(\\theta, \\theta^{old}) + constant\\)</span>.</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"em算法\">EM算法</h1>\n<h2 id=\"概述\">概述</h2>\n<p>已有一个对随机变量的观测（Observation）<span class=\"math inline\">\\(X\\)</span>，我们想求出模型参数<span class=\"math inline\">\\(\\theta\\)</span>。我们假设X的分布不仅受<span class=\"math inline\">\\(\\theta\\)</span>影响，而且还受一个隐变量<span class=\"math inline\">\\(Z\\)</span>影响（<span class=\"math inline\">\\(Z\\)</span>也由<span class=\"math inline\">\\(\\theta\\)</span>决定）。</p>\n<p>所以似然函数（likelihood）可以写为 <span class=\"math display\">\\[\\begin{align*}\nL(\\theta) &amp;= \\log P(X\\mid \\theta) = \\log \\sum_Z P(X,Z\\mid \\theta) \\\\\n          &amp;= \\log (\\sum_Z P(X\\mid Z,\\theta)P(Z\\mid \\theta))\n\\end{align*}\\]</span></p>\n<h2 id=\"算法输入\">算法输入</h2>\n<ul>\n<li>观测量 <span class=\"math inline\">\\(X\\)</span></li>\n<li>隐变量 <span class=\"math inline\">\\(Z\\)</span></li>\n<li>联合分布 <span class=\"math inline\">\\(p(X,Z\\mid \\theta)\\)</span></li>\n<li>条件分布 <span class=\"math inline\">\\(p(Z\\mid X, \\theta)\\)</span></li>\n</ul>\n<h2 id=\"算法输出\">算法输出</h2>\n<p>参数<span class=\"math inline\">\\(\\theta = \\arg\\max_\\theta L(\\theta)\\)</span>","more":"</p>\n<h2 id=\"procedure\">Procedure</h2>\n<p>Note: <span class=\"math inline\">\\(\\theta_i\\)</span> is the value of i-th iteration's parameter <span class=\"math inline\">\\(\\theta\\)</span>.</p>\n<ol type=\"1\">\n<li>Select an initial <span class=\"math inline\">\\(\\theta_0\\)</span></li>\n<li>(i+1)-th <strong>E</strong> step: compute <span class=\"math display\">\\[ \\begin{align} Q(\\theta,\\theta_i) &amp;= E_Z[\\ln p(X,Z\\mid \\theta)|X,\\theta_i] \\\\ &amp;= \\sum_Z \\ln p(X,Z\\mid \\theta) p(Z\\mid X,\\theta_i) \\end{align}\\]</span></li>\n<li>(i+1)-th <strong>M</strong> step: compute <span class=\"math inline\">\\(\\theta_{i+1} = \\underset{\\theta}{\\text{argmax}} Q(\\theta, \\theta_i)\\)</span></li>\n<li>repeat 2 and 3 until convergence</li>\n</ol>\n<h1 id=\"intuition-behind-em\">Intuition behind EM</h1>\n<p><span class=\"math display\">\\[\n\\begin{align}\n\\ln p(X\\mid \\theta) &amp;= \\sum_Z q(Z) \\cdot \\ln \\dfrac{p(X,Z\\mid \\theta)}{p(Z\\mid X,\\theta)} \\\\\n&amp;= \\sum_Z q(Z) \\cdot \\ln p(X,Z\\mid \\theta) - \\sum_Z q(Z) \\cdot \\ln p(Z\\mid X,\\theta) \\\\\n&amp;= \\sum_Z q(Z) \\cdot \\ln \\dfrac{p(X,Z\\mid \\theta)}{q(Z)} - \\sum_Z q(Z) \\cdot \\ln \\dfrac{p(Z\\mid X,\\theta)}{q(Z)} \\\\\n&amp;= \\mathcal{L}(q,\\theta) + KL(q \\| p)\n\\end{align}\n\\]</span></p>\n<p><span class=\"math inline\">\\(KL(q\\|p)\\ge 0\\)</span> always holds. We fix KL-divergence and maximize <span class=\"math inline\">\\(\\mathcal{L}\\)</span>.</p>\n<p>Let <span class=\"math inline\">\\(KL(q\\|p) = 0\\)</span> so we have <span class=\"math inline\">\\(q(Z)=p(Z\\mid X,\\theta)\\)</span>.</p>\n<p>If we subsitute <span class=\"math inline\">\\(q(Z)=p(Z\\mid X,\\theta)\\)</span> into <span class=\"math inline\">\\(\\mathcal{L}\\)</span>, <span class=\"math inline\">\\(\\mathcal{L}(q,\\theta) = Q(\\theta, \\theta^{old}) + constant\\)</span>.</p>"},{"title":"Bit Level Counters","date":"2018-11-16T01:51:06.000Z","_content":"> TODO: Add explainations and reasoning for bitwise operations\n\n+ Related problem: https://leetcode.com/problems/single-number-ii\n\n# Basic Analysis\nFor every bit, we could count the number of ones to determine that bit of the single number. Clearly, there is no need to employ correlations between bits. So we could simply generalize the counting method to anything that has a binary representation. As several bits (in our case, 2 bits) is enough to capture the useful information, we only needs 2*32 bits (in this case) to store the counters. Consequently, two 32-bit integers has provided enough space for our problem.\n\nThere are many ways to represent the 32 counters:\n\n1. We could store 16 counters in one integer and the rest in the other integer. To make it simple, we choose one to count odd bits and the other to count even bits. \n1. We could store lower bits in one number and higher bits in the other number. This method could better take advantage of bitwise operations, as it has bit to bit correspondence between numbers and low/high counters.\n<!--more-->\n\n## Two bits groups: count even and odd bits\nThis method needs shift operations to align high bits and low bits. Which is not a worry for method 2.\n```c\nunsigned odd32=0x55555555;\nunsigned ternary_add32(unsigned S, unsigned a){\n    int lo = ~(S>>1) & (S^a) & odd32;\n    int hi = ~lo & ((S>>1)^a) & odd32;\n    return (hi<<1)|lo;\n}\n\nunsigned single_number(unsigned *A, int length){\n    unsigned odd=0, even=0;\n    for (int i=0; i<length; i++){\n        odd = ternary_add32(S1, A[i]);\n        even = ternary_add32(S2, A[i]>>1);\n    }\n    return (even<<1)|odd;\n}\n```\n\n## Bitwise counter: high bits and low bits of counters\n```c\nint single_number(int A[], int length) {\n    int low = 0, high = 0;\n    for(int i = 0; i < length; i++){\n        low = (low ^ A[i]) & ~high;\n        high = (high ^ A[i]) & ~low;\n    }\n    return low;\n}\n```\n\n","source":"_posts/Bit-Level-Ternary-Counters.md","raw":"---\ntitle: Bit Level Counters\ndate: 2018-11-15 20:51:06\ntags:\n---\n> TODO: Add explainations and reasoning for bitwise operations\n\n+ Related problem: https://leetcode.com/problems/single-number-ii\n\n# Basic Analysis\nFor every bit, we could count the number of ones to determine that bit of the single number. Clearly, there is no need to employ correlations between bits. So we could simply generalize the counting method to anything that has a binary representation. As several bits (in our case, 2 bits) is enough to capture the useful information, we only needs 2*32 bits (in this case) to store the counters. Consequently, two 32-bit integers has provided enough space for our problem.\n\nThere are many ways to represent the 32 counters:\n\n1. We could store 16 counters in one integer and the rest in the other integer. To make it simple, we choose one to count odd bits and the other to count even bits. \n1. We could store lower bits in one number and higher bits in the other number. This method could better take advantage of bitwise operations, as it has bit to bit correspondence between numbers and low/high counters.\n<!--more-->\n\n## Two bits groups: count even and odd bits\nThis method needs shift operations to align high bits and low bits. Which is not a worry for method 2.\n```c\nunsigned odd32=0x55555555;\nunsigned ternary_add32(unsigned S, unsigned a){\n    int lo = ~(S>>1) & (S^a) & odd32;\n    int hi = ~lo & ((S>>1)^a) & odd32;\n    return (hi<<1)|lo;\n}\n\nunsigned single_number(unsigned *A, int length){\n    unsigned odd=0, even=0;\n    for (int i=0; i<length; i++){\n        odd = ternary_add32(S1, A[i]);\n        even = ternary_add32(S2, A[i]>>1);\n    }\n    return (even<<1)|odd;\n}\n```\n\n## Bitwise counter: high bits and low bits of counters\n```c\nint single_number(int A[], int length) {\n    int low = 0, high = 0;\n    for(int i = 0; i < length; i++){\n        low = (low ^ A[i]) & ~high;\n        high = (high ^ A[i]) & ~low;\n    }\n    return low;\n}\n```\n\n","slug":"Bit-Level-Ternary-Counters","published":1,"updated":"2018-12-01T19:54:14.439Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp5yeygs0003jtc6wjp8aa7l","content":"<blockquote>\n<p>TODO: Add explainations and reasoning for bitwise operations</p>\n</blockquote>\n<ul>\n<li>Related problem: https://leetcode.com/problems/single-number-ii</li>\n</ul>\n<h1 id=\"basic-analysis\">Basic Analysis</h1>\n<p>For every bit, we could count the number of ones to determine that bit of the single number. Clearly, there is no need to employ correlations between bits. So we could simply generalize the counting method to anything that has a binary representation. As several bits (in our case, 2 bits) is enough to capture the useful information, we only needs 2*32 bits (in this case) to store the counters. Consequently, two 32-bit integers has provided enough space for our problem.</p>\n<p>There are many ways to represent the 32 counters:</p>\n<ol type=\"1\">\n<li>We could store 16 counters in one integer and the rest in the other integer. To make it simple, we choose one to count odd bits and the other to count even bits.</li>\n<li>We could store lower bits in one number and higher bits in the other number. This method could better take advantage of bitwise operations, as it has bit to bit correspondence between numbers and low/high counters. <a id=\"more\"></a></li>\n</ol>\n<h2 id=\"two-bits-groups-count-even-and-odd-bits\">Two bits groups: count even and odd bits</h2>\n<p>This method needs shift operations to align high bits and low bits. Which is not a worry for method 2. <figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">unsigned</span> odd32=<span class=\"number\">0x55555555</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">unsigned</span> <span class=\"title\">ternary_add32</span><span class=\"params\">(<span class=\"keyword\">unsigned</span> S, <span class=\"keyword\">unsigned</span> a)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> lo = ~(S&gt;&gt;<span class=\"number\">1</span>) &amp; (S^a) &amp; odd32;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> hi = ~lo &amp; ((S&gt;&gt;<span class=\"number\">1</span>)^a) &amp; odd32;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (hi&lt;&lt;<span class=\"number\">1</span>)|lo;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">unsigned</span> <span class=\"title\">single_number</span><span class=\"params\">(<span class=\"keyword\">unsigned</span> *A, <span class=\"keyword\">int</span> length)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> odd=<span class=\"number\">0</span>, even=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;length; i++)&#123;</span><br><span class=\"line\">        odd = ternary_add32(S1, A[i]);</span><br><span class=\"line\">        even = ternary_add32(S2, A[i]&gt;&gt;<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (even&lt;&lt;<span class=\"number\">1</span>)|odd;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"bitwise-counter-high-bits-and-low-bits-of-counters\">Bitwise counter: high bits and low bits of counters</h2>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">single_number</span><span class=\"params\">(<span class=\"keyword\">int</span> A[], <span class=\"keyword\">int</span> length)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> low = <span class=\"number\">0</span>, high = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; length; i++)&#123;</span><br><span class=\"line\">        low = (low ^ A[i]) &amp; ~high;</span><br><span class=\"line\">        high = (high ^ A[i]) &amp; ~low;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> low;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>TODO: Add explainations and reasoning for bitwise operations</p>\n</blockquote>\n<ul>\n<li>Related problem: https://leetcode.com/problems/single-number-ii</li>\n</ul>\n<h1 id=\"basic-analysis\">Basic Analysis</h1>\n<p>For every bit, we could count the number of ones to determine that bit of the single number. Clearly, there is no need to employ correlations between bits. So we could simply generalize the counting method to anything that has a binary representation. As several bits (in our case, 2 bits) is enough to capture the useful information, we only needs 2*32 bits (in this case) to store the counters. Consequently, two 32-bit integers has provided enough space for our problem.</p>\n<p>There are many ways to represent the 32 counters:</p>\n<ol type=\"1\">\n<li>We could store 16 counters in one integer and the rest in the other integer. To make it simple, we choose one to count odd bits and the other to count even bits.</li>\n<li>We could store lower bits in one number and higher bits in the other number. This method could better take advantage of bitwise operations, as it has bit to bit correspondence between numbers and low/high counters.","more":"</li>\n</ol>\n<h2 id=\"two-bits-groups-count-even-and-odd-bits\">Two bits groups: count even and odd bits</h2>\n<p>This method needs shift operations to align high bits and low bits. Which is not a worry for method 2. <figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">unsigned</span> odd32=<span class=\"number\">0x55555555</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">unsigned</span> <span class=\"title\">ternary_add32</span><span class=\"params\">(<span class=\"keyword\">unsigned</span> S, <span class=\"keyword\">unsigned</span> a)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> lo = ~(S&gt;&gt;<span class=\"number\">1</span>) &amp; (S^a) &amp; odd32;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> hi = ~lo &amp; ((S&gt;&gt;<span class=\"number\">1</span>)^a) &amp; odd32;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (hi&lt;&lt;<span class=\"number\">1</span>)|lo;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">unsigned</span> <span class=\"title\">single_number</span><span class=\"params\">(<span class=\"keyword\">unsigned</span> *A, <span class=\"keyword\">int</span> length)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> odd=<span class=\"number\">0</span>, even=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;length; i++)&#123;</span><br><span class=\"line\">        odd = ternary_add32(S1, A[i]);</span><br><span class=\"line\">        even = ternary_add32(S2, A[i]&gt;&gt;<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (even&lt;&lt;<span class=\"number\">1</span>)|odd;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"bitwise-counter-high-bits-and-low-bits-of-counters\">Bitwise counter: high bits and low bits of counters</h2>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">single_number</span><span class=\"params\">(<span class=\"keyword\">int</span> A[], <span class=\"keyword\">int</span> length)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> low = <span class=\"number\">0</span>, high = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; length; i++)&#123;</span><br><span class=\"line\">        low = (low ^ A[i]) &amp; ~high;</span><br><span class=\"line\">        high = (high ^ A[i]) &amp; ~low;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> low;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"Writing Plans","date":"2018-11-16T04:27:05.000Z","_content":"\nThese are some articles that we are interested in writing:\n\n+ Eulerian Path\n    + lc753. Cracking the Safe\n+ Binary Search and Inequalities\n    + lc378. Kth Smallest Element in a Sorted Matrix\n    + lc878. Nth Magical Number\n    + lc4. Median of two sorted numbers\n    + lc29. Divide Two Integers\n    + lc774. Minimize Max Distance to Gas Station\n+ Search Under Equality Constraints\n    + lc240. Search a 2D Matrix II\n    + lc939. Minimum Area Rectangle\n    + lc446. Arithmetic Slices II - Subsequence\n+ Prefix Sums, Diff and probably Binary Indexed Trees\n    + Diff as a companion of sum: lc370. Range Addition\n+ Dynamic Programming\n    + lc312. Burst Balloons\n    + lc818. Race Car\n    + lc329. Longest Increasing Path in a Matrix\n    + lc115 & lc940. Distinct Subsequences I & II\n    + lc879. Profitable Schemes\n+ Onepass Algorithms (one pass after preprocessing: lc316)\n    + lc32. Longest Valid Parentheses\n    + lc651. 4 Keys Keyboard\n    + lc862. Shortest Subarray with Sum at Least K\n    + lc84. Largest Rectangle in Histogram\n        - lc85. Maximal Rectangle\n    + lc316. Remove Duplicate Letters (and get min lexical order subsequence)\n    + lc891. Sum of Subsequence Widths\n    + lc903. Valid Permutations for DI Sequence\n+ Padding?\n+ Balanced Trees\n    + Interval Tree?\n+ Recursion vs Stack\n+ Greedy Algorithms like Dijkstra etc.\n    + lc407. Trapping Rain Water II\n    + lc778. Swim in Rising Water\n+ Bitwise operations\n+ Bookkeeping by HashSet\n    + lc381. Insert Delete GetRandom O(1)\n+ Linkedlist skills and Ordered Structure\n    + LRU cache\n    + Pluggable Queue?\n+ Shortest Path Algorithms: BFS, Dijkstra, A*, Floyd, Bellman-Ford\n    + lc752. Open the Lock\n+ ...\n","source":"_posts/Writing-Plans.md","raw":"---\ntitle: Writing Plans\ndate: 2018-11-15 23:27:05\ntags:\n---\n\nThese are some articles that we are interested in writing:\n\n+ Eulerian Path\n    + lc753. Cracking the Safe\n+ Binary Search and Inequalities\n    + lc378. Kth Smallest Element in a Sorted Matrix\n    + lc878. Nth Magical Number\n    + lc4. Median of two sorted numbers\n    + lc29. Divide Two Integers\n    + lc774. Minimize Max Distance to Gas Station\n+ Search Under Equality Constraints\n    + lc240. Search a 2D Matrix II\n    + lc939. Minimum Area Rectangle\n    + lc446. Arithmetic Slices II - Subsequence\n+ Prefix Sums, Diff and probably Binary Indexed Trees\n    + Diff as a companion of sum: lc370. Range Addition\n+ Dynamic Programming\n    + lc312. Burst Balloons\n    + lc818. Race Car\n    + lc329. Longest Increasing Path in a Matrix\n    + lc115 & lc940. Distinct Subsequences I & II\n    + lc879. Profitable Schemes\n+ Onepass Algorithms (one pass after preprocessing: lc316)\n    + lc32. Longest Valid Parentheses\n    + lc651. 4 Keys Keyboard\n    + lc862. Shortest Subarray with Sum at Least K\n    + lc84. Largest Rectangle in Histogram\n        - lc85. Maximal Rectangle\n    + lc316. Remove Duplicate Letters (and get min lexical order subsequence)\n    + lc891. Sum of Subsequence Widths\n    + lc903. Valid Permutations for DI Sequence\n+ Padding?\n+ Balanced Trees\n    + Interval Tree?\n+ Recursion vs Stack\n+ Greedy Algorithms like Dijkstra etc.\n    + lc407. Trapping Rain Water II\n    + lc778. Swim in Rising Water\n+ Bitwise operations\n+ Bookkeeping by HashSet\n    + lc381. Insert Delete GetRandom O(1)\n+ Linkedlist skills and Ordered Structure\n    + LRU cache\n    + Pluggable Queue?\n+ Shortest Path Algorithms: BFS, Dijkstra, A*, Floyd, Bellman-Ford\n    + lc752. Open the Lock\n+ ...\n","slug":"Writing-Plans","published":1,"updated":"2018-12-01T19:54:14.440Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp5yeygv0005jtc6ds9ovrnh","content":"<p>These are some articles that we are interested in writing:</p>\n<ul>\n<li>Eulerian Path\n<ul>\n<li>lc753. Cracking the Safe</li>\n</ul></li>\n<li>Binary Search and Inequalities\n<ul>\n<li>lc378. Kth Smallest Element in a Sorted Matrix</li>\n<li>lc878. Nth Magical Number</li>\n<li>lc4. Median of two sorted numbers</li>\n<li>lc29. Divide Two Integers</li>\n<li>lc774. Minimize Max Distance to Gas Station</li>\n</ul></li>\n<li>Search Under Equality Constraints\n<ul>\n<li>lc240. Search a 2D Matrix II</li>\n<li>lc939. Minimum Area Rectangle</li>\n<li>lc446. Arithmetic Slices II - Subsequence</li>\n</ul></li>\n<li>Prefix Sums, Diff and probably Binary Indexed Trees\n<ul>\n<li>Diff as a companion of sum: lc370. Range Addition</li>\n</ul></li>\n<li>Dynamic Programming\n<ul>\n<li>lc312. Burst Balloons</li>\n<li>lc818. Race Car</li>\n<li>lc329. Longest Increasing Path in a Matrix</li>\n<li>lc115 &amp; lc940. Distinct Subsequences I &amp; II</li>\n<li>lc879. Profitable Schemes</li>\n</ul></li>\n<li>Onepass Algorithms (one pass after preprocessing: lc316)\n<ul>\n<li>lc32. Longest Valid Parentheses</li>\n<li>lc651. 4 Keys Keyboard</li>\n<li>lc862. Shortest Subarray with Sum at Least K</li>\n<li>lc84. Largest Rectangle in Histogram\n<ul>\n<li>lc85. Maximal Rectangle</li>\n</ul></li>\n<li>lc316. Remove Duplicate Letters (and get min lexical order subsequence)</li>\n<li>lc891. Sum of Subsequence Widths</li>\n<li>lc903. Valid Permutations for DI Sequence</li>\n</ul></li>\n<li>Padding?</li>\n<li>Balanced Trees\n<ul>\n<li>Interval Tree?</li>\n</ul></li>\n<li>Recursion vs Stack</li>\n<li>Greedy Algorithms like Dijkstra etc.\n<ul>\n<li>lc407. Trapping Rain Water II</li>\n<li>lc778. Swim in Rising Water</li>\n</ul></li>\n<li>Bitwise operations</li>\n<li>Bookkeeping by HashSet\n<ul>\n<li>lc381. Insert Delete GetRandom O(1)</li>\n</ul></li>\n<li>Linkedlist skills and Ordered Structure\n<ul>\n<li>LRU cache</li>\n<li>Pluggable Queue?</li>\n</ul></li>\n<li>Shortest Path Algorithms: BFS, Dijkstra, A*, Floyd, Bellman-Ford\n<ul>\n<li>lc752. Open the Lock</li>\n</ul></li>\n<li>...</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>These are some articles that we are interested in writing:</p>\n<ul>\n<li>Eulerian Path\n<ul>\n<li>lc753. Cracking the Safe</li>\n</ul></li>\n<li>Binary Search and Inequalities\n<ul>\n<li>lc378. Kth Smallest Element in a Sorted Matrix</li>\n<li>lc878. Nth Magical Number</li>\n<li>lc4. Median of two sorted numbers</li>\n<li>lc29. Divide Two Integers</li>\n<li>lc774. Minimize Max Distance to Gas Station</li>\n</ul></li>\n<li>Search Under Equality Constraints\n<ul>\n<li>lc240. Search a 2D Matrix II</li>\n<li>lc939. Minimum Area Rectangle</li>\n<li>lc446. Arithmetic Slices II - Subsequence</li>\n</ul></li>\n<li>Prefix Sums, Diff and probably Binary Indexed Trees\n<ul>\n<li>Diff as a companion of sum: lc370. Range Addition</li>\n</ul></li>\n<li>Dynamic Programming\n<ul>\n<li>lc312. Burst Balloons</li>\n<li>lc818. Race Car</li>\n<li>lc329. Longest Increasing Path in a Matrix</li>\n<li>lc115 &amp; lc940. Distinct Subsequences I &amp; II</li>\n<li>lc879. Profitable Schemes</li>\n</ul></li>\n<li>Onepass Algorithms (one pass after preprocessing: lc316)\n<ul>\n<li>lc32. Longest Valid Parentheses</li>\n<li>lc651. 4 Keys Keyboard</li>\n<li>lc862. Shortest Subarray with Sum at Least K</li>\n<li>lc84. Largest Rectangle in Histogram\n<ul>\n<li>lc85. Maximal Rectangle</li>\n</ul></li>\n<li>lc316. Remove Duplicate Letters (and get min lexical order subsequence)</li>\n<li>lc891. Sum of Subsequence Widths</li>\n<li>lc903. Valid Permutations for DI Sequence</li>\n</ul></li>\n<li>Padding?</li>\n<li>Balanced Trees\n<ul>\n<li>Interval Tree?</li>\n</ul></li>\n<li>Recursion vs Stack</li>\n<li>Greedy Algorithms like Dijkstra etc.\n<ul>\n<li>lc407. Trapping Rain Water II</li>\n<li>lc778. Swim in Rising Water</li>\n</ul></li>\n<li>Bitwise operations</li>\n<li>Bookkeeping by HashSet\n<ul>\n<li>lc381. Insert Delete GetRandom O(1)</li>\n</ul></li>\n<li>Linkedlist skills and Ordered Structure\n<ul>\n<li>LRU cache</li>\n<li>Pluggable Queue?</li>\n</ul></li>\n<li>Shortest Path Algorithms: BFS, Dijkstra, A*, Floyd, Bellman-Ford\n<ul>\n<li>lc752. Open the Lock</li>\n</ul></li>\n<li>...</li>\n</ul>\n"},{"title":"试谈一下Onepass算法","mathjax":true,"date":"2018-12-01T19:58:22.000Z","_content":"\n### 所谓Onepass算法\n\n对于这个名字大家可能很奇怪，什么是onepass算法？其实这是一类算法问题的简称，这种算法的根本目的是在O(N)的时间内解决问题，即，solve the problem in one pass. \n\n本人对于Onepass的理解还不够深刻，所以今天仅仅是试着借助一些例子去试着谈一谈这一类有趣的算法问题。\n\n\n\n### Onepass的核心\n\nOnepass的核心是dp，dp的核心在于caching，在算法的进程中不断地更新储存的信息，我们叫“状态”，去结合下一时刻所遇到的信息以及更新后的状态去得到下一时刻状态——最终得到终态。而Onepass又是dp的特例，我们一般仅用O(N)或者O(1)的space去解决问题。同时，一些复杂dp的过程中可能会去追溯之前某些特定时刻的状态，但是对于onepass来说，一般只追溯之前一个时刻的状态，是一个非常轻便又巧妙的算法。\n\n空口无凭，我们先借一个小例子去认识一下onepass算法。\n\n\n\n### 引子\n\n#### LC84\n\n> Given *n* non-negative integers representing the histogram's bar height where the width of each bar is 1, find the area of largest rectangle in the histogram.\n\n![LC84](./LC84.png)\n\n这一道题代表一系列的题目，算法的核心在于构建一个stack，在每一个时刻都保持stack是一个我们想要的状态。对于这一题来说，我们想要这个stack里保持递增。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/试谈一下Onepass算法.md","raw":"---\ntitle: 试谈一下Onepass算法\nmathjax: true\ndate: 2018-12-01 14:58:22\ntags: Onepass, dynamic programming\n---\n\n### 所谓Onepass算法\n\n对于这个名字大家可能很奇怪，什么是onepass算法？其实这是一类算法问题的简称，这种算法的根本目的是在O(N)的时间内解决问题，即，solve the problem in one pass. \n\n本人对于Onepass的理解还不够深刻，所以今天仅仅是试着借助一些例子去试着谈一谈这一类有趣的算法问题。\n\n\n\n### Onepass的核心\n\nOnepass的核心是dp，dp的核心在于caching，在算法的进程中不断地更新储存的信息，我们叫“状态”，去结合下一时刻所遇到的信息以及更新后的状态去得到下一时刻状态——最终得到终态。而Onepass又是dp的特例，我们一般仅用O(N)或者O(1)的space去解决问题。同时，一些复杂dp的过程中可能会去追溯之前某些特定时刻的状态，但是对于onepass来说，一般只追溯之前一个时刻的状态，是一个非常轻便又巧妙的算法。\n\n空口无凭，我们先借一个小例子去认识一下onepass算法。\n\n\n\n### 引子\n\n#### LC84\n\n> Given *n* non-negative integers representing the histogram's bar height where the width of each bar is 1, find the area of largest rectangle in the histogram.\n\n![LC84](./LC84.png)\n\n这一道题代表一系列的题目，算法的核心在于构建一个stack，在每一个时刻都保持stack是一个我们想要的状态。对于这一题来说，我们想要这个stack里保持递增。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"试谈一下Onepass算法","published":1,"updated":"2018-12-01T21:13:22.734Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp5yeygw0006jtc6suww141y","content":"<h3 id=\"所谓onepass算法\">所谓Onepass算法</h3>\n<p>对于这个名字大家可能很奇怪，什么是onepass算法？其实这是一类算法问题的简称，这种算法的根本目的是在O(N)的时间内解决问题，即，solve the problem in one pass.</p>\n<p>本人对于Onepass的理解还不够深刻，所以今天仅仅是试着借助一些例子去试着谈一谈这一类有趣的算法问题。</p>\n<h3 id=\"onepass的核心\">Onepass的核心</h3>\n<p>Onepass的核心是dp，dp的核心在于caching，在算法的进程中不断地更新储存的信息，我们叫“状态”，去结合下一时刻所遇到的信息以及更新后的状态去得到下一时刻状态——最终得到终态。而Onepass又是dp的特例，我们一般仅用O(N)或者O(1)的space去解决问题。同时，一些复杂dp的过程中可能会去追溯之前某些特定时刻的状态，但是对于onepass来说，一般只追溯之前一个时刻的状态，是一个非常轻便又巧妙的算法。</p>\n<p>空口无凭，我们先借一个小例子去认识一下onepass算法。</p>\n<h3 id=\"引子\">引子</h3>\n<h4 id=\"lc84\">LC84</h4>\n<blockquote>\n<p>Given <em>n</em> non-negative integers representing the histogram's bar height where the width of each bar is 1, find the area of largest rectangle in the histogram.</p>\n</blockquote>\n<figure>\n<img src=\"./LC84.png\" alt=\"LC84\"><figcaption>LC84</figcaption>\n</figure>\n<p>这一道题代表一系列的题目，算法的核心在于构建一个stack，在每一个时刻都保持stack是一个我们想要的状态。对于这一题来说，我们想要这个stack里保持递增。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"所谓onepass算法\">所谓Onepass算法</h3>\n<p>对于这个名字大家可能很奇怪，什么是onepass算法？其实这是一类算法问题的简称，这种算法的根本目的是在O(N)的时间内解决问题，即，solve the problem in one pass.</p>\n<p>本人对于Onepass的理解还不够深刻，所以今天仅仅是试着借助一些例子去试着谈一谈这一类有趣的算法问题。</p>\n<h3 id=\"onepass的核心\">Onepass的核心</h3>\n<p>Onepass的核心是dp，dp的核心在于caching，在算法的进程中不断地更新储存的信息，我们叫“状态”，去结合下一时刻所遇到的信息以及更新后的状态去得到下一时刻状态——最终得到终态。而Onepass又是dp的特例，我们一般仅用O(N)或者O(1)的space去解决问题。同时，一些复杂dp的过程中可能会去追溯之前某些特定时刻的状态，但是对于onepass来说，一般只追溯之前一个时刻的状态，是一个非常轻便又巧妙的算法。</p>\n<p>空口无凭，我们先借一个小例子去认识一下onepass算法。</p>\n<h3 id=\"引子\">引子</h3>\n<h4 id=\"lc84\">LC84</h4>\n<blockquote>\n<p>Given <em>n</em> non-negative integers representing the histogram's bar height where the width of each bar is 1, find the area of largest rectangle in the histogram.</p>\n</blockquote>\n<figure>\n<img src=\"./LC84.png\" alt=\"LC84\"><figcaption>LC84</figcaption>\n</figure>\n<p>这一道题代表一系列的题目，算法的核心在于构建一个stack，在每一个时刻都保持stack是一个我们想要的状态。对于这一题来说，我们想要这个stack里保持递增。</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cjp5yeygr0002jtc6fwowwa6q","tag_id":"cjp5yeygu0004jtc6sczl0ws5","_id":"cjp5yeygz0009jtc6qc4cemsk"},{"post_id":"cjp5yeygr0002jtc6fwowwa6q","tag_id":"cjp5yeygy0007jtc6vm1v6gw0","_id":"cjp5yeygz000ajtc68e6a7189"},{"post_id":"cjp5yeygw0006jtc6suww141y","tag_id":"cjp5yeygy0008jtc6mkdseda4","_id":"cjp5yeygz000bjtc6v6y70g0y"}],"Tag":[{"name":"ML","_id":"cjp5yeygu0004jtc6sczl0ws5"},{"name":"NLP","_id":"cjp5yeygy0007jtc6vm1v6gw0"},{"name":"Onepass, dynamic programming","_id":"cjp5yeygy0008jtc6mkdseda4"}]}}